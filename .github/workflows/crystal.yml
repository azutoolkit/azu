name: Crystal CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: crystallang/crystal:1.16.3
    services:
      # Label used to access the service container
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: shards install

      - name: Build binary to test
        run: shards build example_app

      - name: Check code style
        run: crystal tool format --check

      - name: Run tests
        run: crystal spec -v --fail-fast
        env:
          CRYSTAL_ENV: pipeline
          CRYSTAL_LOG_SOURCES: "*"
          CRYSTAL_LOG_LEVEL: DEBUG
          PORT: 4000
          PORT_REUSE: false
          HOST: 0.0.0.0
          REDIS_HOST: redis
          REDIS_PORT: 6379
  release:
    runs-on: ubuntu-latest
    needs:
      - build
    if: ${{ success() }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Compute Release Version
        id: semver
        uses: paulhatch/semantic-version@v4.0.2
        with:
          tag_prefix: "v"
          major_pattern: "(MAJOR)"
          minor_pattern: "(MINOR)"
          # A string to determine the format of the version output
          format: "${major}.${minor}.${patch}"
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: false

      - name: Bump Shard Version
        id: bump-shard
        uses: fjogeleit/yaml-update-action@master
        with:
          valueFile: shard.yml
          propertyPath: version
          value: ${{steps.semver.outputs.version}}
          commitChange: true
          targetBranch: master
          masterBranchName: master
          createPR: false
          branch: master
          message: Set shard version ${{ steps.semver.outputs.version }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{steps.semver.outputs.version_tag}}
          release_name: Release v${{steps.semver.outputs.version}}
          draft: false
          prerelease: false
